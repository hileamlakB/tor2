# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tor_pb2 as tor__pb2


class ClientStub(object):
    """Service for clients
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestCircuit = channel.unary_unary(
                '/tor.Client/RequestCircuit',
                request_serializer=tor__pb2.RequestCircuitRequest.SerializeToString,
                response_deserializer=tor__pb2.RequestCircuitResponse.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/tor.Client/SendMessage',
                request_serializer=tor__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=tor__pb2.SendMessageResponse.FromString,
                )


class ClientServicer(object):
    """Service for clients
    """

    def RequestCircuit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestCircuit': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCircuit,
                    request_deserializer=tor__pb2.RequestCircuitRequest.FromString,
                    response_serializer=tor__pb2.RequestCircuitResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=tor__pb2.SendMessageRequest.FromString,
                    response_serializer=tor__pb2.SendMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tor.Client', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Client(object):
    """Service for clients
    """

    @staticmethod
    def RequestCircuit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tor.Client/RequestCircuit',
            tor__pb2.RequestCircuitRequest.SerializeToString,
            tor__pb2.RequestCircuitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tor.Client/SendMessage',
            tor__pb2.SendMessageRequest.SerializeToString,
            tor__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RelayStub(object):
    """Service for relay nodes
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessOutboundMessage = channel.unary_unary(
                '/tor.Relay/ProcessOutboundMessage',
                request_serializer=tor__pb2.ProcessMessageRequest.SerializeToString,
                response_deserializer=tor__pb2.ProcessMessageResponse.FromString,
                )
        self.ProcessReturnMessage = channel.unary_unary(
                '/tor.Relay/ProcessReturnMessage',
                request_serializer=tor__pb2.ProcessMessageRequest.SerializeToString,
                response_deserializer=tor__pb2.ProcessMessageResponse.FromString,
                )
        self.AcceptKey = channel.unary_unary(
                '/tor.Relay/AcceptKey',
                request_serializer=tor__pb2.AcceptKeyRequest.SerializeToString,
                response_deserializer=tor__pb2.AcceptKeyResponse.FromString,
                )


class RelayServicer(object):
    """Service for relay nodes
    """

    def ProcessOutboundMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessReturnMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RelayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessOutboundMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessOutboundMessage,
                    request_deserializer=tor__pb2.ProcessMessageRequest.FromString,
                    response_serializer=tor__pb2.ProcessMessageResponse.SerializeToString,
            ),
            'ProcessReturnMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessReturnMessage,
                    request_deserializer=tor__pb2.ProcessMessageRequest.FromString,
                    response_serializer=tor__pb2.ProcessMessageResponse.SerializeToString,
            ),
            'AcceptKey': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptKey,
                    request_deserializer=tor__pb2.AcceptKeyRequest.FromString,
                    response_serializer=tor__pb2.AcceptKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tor.Relay', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Relay(object):
    """Service for relay nodes
    """

    @staticmethod
    def ProcessOutboundMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tor.Relay/ProcessOutboundMessage',
            tor__pb2.ProcessMessageRequest.SerializeToString,
            tor__pb2.ProcessMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessReturnMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tor.Relay/ProcessReturnMessage',
            tor__pb2.ProcessMessageRequest.SerializeToString,
            tor__pb2.ProcessMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tor.Relay/AcceptKey',
            tor__pb2.AcceptKeyRequest.SerializeToString,
            tor__pb2.AcceptKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DirectoryServerStub(object):
    """Service for the directory server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRelayNodes = channel.unary_unary(
                '/tor.DirectoryServer/GetRelayNodes',
                request_serializer=tor__pb2.GetRelayNodesRequest.SerializeToString,
                response_deserializer=tor__pb2.GetRelayNodesResponse.FromString,
                )


class DirectoryServerServicer(object):
    """Service for the directory server
    """

    def GetRelayNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DirectoryServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRelayNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRelayNodes,
                    request_deserializer=tor__pb2.GetRelayNodesRequest.FromString,
                    response_serializer=tor__pb2.GetRelayNodesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tor.DirectoryServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DirectoryServer(object):
    """Service for the directory server
    """

    @staticmethod
    def GetRelayNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tor.DirectoryServer/GetRelayNodes',
            tor__pb2.GetRelayNodesRequest.SerializeToString,
            tor__pb2.GetRelayNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
